			

			NELSON CUERVO TEST - DOCUMENTATION API



Description du Projet:

Ce dépôt contient un projet d'API RESTful développé en .NET 7 et SQL Server. Le projet comprend un document texte avec le code SQL pour la création de la base de données, l'insertion et la manipulation des données selon les instructions fournies. Il est important de noter que la base de données a été créée en localhost, il peut donc être nécessaire de mettre à jour la chaîne de connexion à MSSQL selon les besoins de votre environnement.


Caractéristiques Principales:

API RESTful développée en .NET 7 et SQL Server.
Utilise Swagger à des fins de test et de documentation.
Les routes et les DTO utilisés peuvent être facilement visualisés une fois l'API lancée.



Défis et Apprentissages:

Ce projet a représenté un défi intéressant, surtout parce que au cours des 9 derniers mois, j'ai travaillé davantage avec des technologies telles que Node.js et MongoDB. Cependant, réappliquer les principes de la programmation orientée objet dans le développement web en utilisant .NET et SQL Server sera toujours une expérience amusante et constructive pour moi. J'ai beaucoup apprécié avoir eu l'opportunité de participer à ce test.



ROUTER ET ENDPOINTS:

--------------------------------------------------------------------------------------
			 =>	Départs     <=
--------------------------------------------------------------------------------------

/api/arrivees

01.GET ALL

- Route : [host]/api/arrives
- Méthode : GET
- Paramètres : Aucun
- Réponse :
  - Code 200 (OK) : Retourne une liste de toutes les arrivées, organisées par ID.
  - Code 404 (Not Found) : En cas d'erreur.
  - Code 403 (Forbidden) : En cas d'accès non autorisé.


02. GET BY ID

- Route : [host]/api/arrivees/{arriveeId:int}
  Exemple : [host]/api/arrivees/2
- Méthode : GET
- Paramètres :
  - arriveeId : l'ID de l'arrivée à rechercher (de type int)
- Réponse :
  - Code 200 (OK) : Retourne les détails de l'arrivée correspondante.
  - Code 404 (Not Found) : Si l'arrivée avec l'ID spécifié n'est pas trouvée.
  - Code 403 (Forbidden) : En cas d'accès non autorisé.
  - Code 400 (Bad Request) : Si la requête est mal formulée.



03. CREATE

- Route : [host]/api/arrivees
- Méthode : POST
- Paramètres dans le corps de la requête :
  - nomNavire : string
  - portOrigine : string
  - terminal : string
  - typeCargaison : string
- Réponse :
  - Code 201 (Created) : Retourne les détails de l'arrivée créée en format JSON.
  - Code 400 (Bad Request) : Si la requête est mal formulée ou si le modèle est invalide.
  - Code 500 (Internal Server Error) : Si un problème se produit lors de la création de l'arrivée.


04. UPDATE

- Route : [host]/api/arrivees/{arriveeId:int}
- Méthode : PATCH
- Paramètres dans le corps de la requête :
  - id : int (doit être fourni pour identifier l'enregistrement à modifier)
  - nomNavire : string
  - portOrigine : string
  - terminal : string
  - typeCargaison : string
- Réponse :
  - Code 204 (No Content) : Indique que la mise à jour a été effectuée avec succès.
  - Code 400 (Bad Request) : Si la requête est mal formulée ou si le modèle est invalide.
  - Code 404 (Not Found) : Si l'enregistrement avec l'ID spécifié n'est pas trouvé.
  - Code 500 (Internal Server Error) : Si un problème se produit lors de la mise à jour de l'arrivée.



05. DELETE

- Route : [host]/api/arrivees/{arriveId:int}
- Méthode : DELETE
- Paramètre dans l'URL :
  - arriveId : int (ID de l'arrivée à supprimer)
- Réponse :
  - Code 204 (No Content) : Indique que la suppression a été effectuée avec succès.
  - Code 400 (Bad Request) : Si la requête est mal formulée ou si le modèle est invalide.
  - Code 403 (Forbidden) : Si l'utilisateur n'est pas autorisé à effectuer cette action.
  - Code 404 (Not Found) : Si l'enregistrement avec l'ID spécifié n'est pas trouvé.
  - Code 500 (Internal Server Error) : Si un problème se produit lors de la suppression de l'arrivée.



--------------------------------------------------------------------------------------
			 =>	Départs     <=
--------------------------------------------------------------------------------------


01. GET ALL

- Route : [host]/api/departs
- Méthode : GET
- Paramètres : Aucun
- Réponse :
  - Code 200 (OK) : Indique que l'opération a réussi et renvoie tous les enregistrements de départs trouvés dans la base de données, ordonnés par ID.
  - Code 403 (Forbidden) : Si l'utilisateur n'est pas autorisé à effectuer cette action.



02. GET BY ID

- Route : [host]/api/departs/{departId}
- Méthode : GET
- Paramètre :
  - departId (int) : L'ID de l'enregistrement de départ à rechercher
- Réponse :
  - Code 200 (OK) : Indique que l'opération a réussi et renvoie les informations de l'enregistrement de départ.
  - Code 400 (Bad Request) : Si la requête est invalide ou si l'ID fourni est incorrect.
  - Code 404 (Not Found) : Si aucun enregistrement avec l'ID spécifié n'est trouvé.
  - Code 403 (Forbidden) : Si l'utilisateur n'est pas autorisé à effectuer cette action.


03. CREATE

- Route : [host]/api/departs
- Méthode : POST
- Corps de la requête :
  - createDepartDto (CreateDepartsDto) : Objet contenant les informations du nouveau départ à créer
    - id (int) : L'ID du départ (auto-incrémenté dans la base de données, ne doit pas être renseigné)
    - nomNavire (string) : Nom du navire (sera récupéré à partir de l'arrivée associée)
    - portDestination (string) : Port de destination du navire
    - quai (string) : Quai de départ du navire
    - arriveeId (int) : ID de l'arrivée associée au départ à créer

- Réponse :
  - Code 201 (Created) : Indique que le départ a été créé avec succès et renvoie le départ créé avec son ID.
  - Code 400 (Bad Request) : Si le modèle de données reçu est invalide ou si l'objet est null.
  - Code 404 (Not Found) : Si l'arrivée associée au départ n'est pas trouvée dans la base de données.
  - Code 500 (Internal Server Error) : Si une erreur survient lors de la création du départ dans la base de données.




04. UPDATE

- Route : [host]/api/departs/{departId}
- Méthode : PATCH
- Paramètre : departId (int) : L'ID du départ à mettre à jour
- Corps de la requête :
  - departsDto (DepartsDto) : Objet contenant les nouvelles informations du départ
    - id (int) : L'ID du départ (doit correspondre à celui de l'enregistrement à mettre à jour)
    - nomNavire (string) : Nom du navire associé au départ
    - portDestination (string) : Port de destination du navire
    - quai (string) : Quai de départ du navire
    - arriveeId (int) : ID de l'arrivée associée au départ

- Réponse :
  - Code 204 (No Content) : Indique que la mise à jour a été effectuée avec succès.
  - Code 404 (Not Found) : Si le départ avec l'ID spécifié n'est pas trouvé dans la base de données.
  - Code 400 (Bad Request) : Si le modèle de données reçu est invalide.
  - Code 500 (Internal Server Error) : Si une erreur survient lors de la mise à jour du départ dans la base de données.



05. DELETE

- Route : [host]/api/departs/{departId}
- Méthode : DELETE
- Paramètre :
  - departId (int) : L'ID de l'enregistrement de départ à supprimer
- Réponse :
  - Code 204 (No Content) : Indique que la suppression a réussi.
  - Code 403 (Forbidden) : Si l'utilisateur n'est pas autorisé à effectuer cette action.
  - Code 404 (Not Found) : Si aucun enregistrement avec l'ID spécifié n'est trouvé.
  - Code 400 (Bad Request) : Si la requête est invalide.


--------------------------------------------------------------------------------------
			 =>	Générer un rapport mensuel    <=
--------------------------------------------------------------------------------------


- Route : [host]/api/rapports/GenererRapportMensuel
- Méthode : GET
- Paramètres :
  - mois (int) : Le mois pour lequel générer le rapport (de 1 à 12)
  - annee (int) : L'année pour laquelle générer le rapport
- Réponse :
  - Code 200 (OK) : Indique que le rapport a été généré avec succès et renvoie les données du rapport.
  - Code 400 (Bad Request) : Si les paramètres fournis sont invalides.
  - Code 404 (Not Found) : Si la ressource demandée n'est pas trouvée.
  - Code 500 (Internal Server Error) : Si une erreur interne du serveur se produit pendant le traitement de la demande.


--------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------
