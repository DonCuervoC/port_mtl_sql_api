
Description du Projet:

Ce dépôt contient un projet d'API RESTful développé en .NET 7 et SQL Server. Le projet comprend un document texte avec le code SQL pour la création de la base de données, l'insertion et la manipulation des données selon les instructions fournies. Il est important de noter que la base de données a été créée en localhost, il peut donc être nécessaire de mettre à jour la chaîne de connexion à MSSQL selon les besoins de votre environnement.


Caractéristiques Principales:

API RESTful développée en .NET 7 et SQL Server.
Utilise Swagger à des fins de test et de documentation.
Les routes et les DTO utilisés peuvent être facilement visualisés une fois l'API lancée.



Défis et Apprentissages:

Ce projet a représenté un défi intéressant, surtout parce que au cours des 9 derniers mois, j'ai travaillé davantage avec des technologies telles que Node.js et MongoDB. Cependant, réappliquer les principes de la programmation orientée objet dans le développement web en utilisant .NET et SQL Server sera toujours une expérience amusante et constructive pour moi. J'ai beaucoup apprécié avoir eu l'opportunité de participer à ce test.



ENDPOINTS:

/api/arrivees

01.

- Route : [host]/api/arrives
- Méthode : GET
- Paramètres : Aucun
- Réponse :
  - Code 200 (OK) : Retourne une liste de toutes les arrivées, organisées par ID.
  - Code 404 (Not Found) : En cas d'erreur.
  - Code 403 (Forbidden) : En cas d'accès non autorisé.


02.

- Route : [host]/api/arrivees/{arriveeId:int}
  Exemple : [host]/api/arrivees/2
- Méthode : GET
- Paramètres :
  - arriveeId : l'ID de l'arrivée à rechercher (de type int)
- Réponse :
  - Code 200 (OK) : Retourne les détails de l'arrivée correspondante.
  - Code 404 (Not Found) : Si l'arrivée avec l'ID spécifié n'est pas trouvée.
  - Code 403 (Forbidden) : En cas d'accès non autorisé.
  - Code 400 (Bad Request) : Si la requête est mal formulée.



03.

- Route : [host]/api/arrivees
- Méthode : POST
- Paramètres dans le corps de la requête :
  - nomNavire : string
  - portOrigine : string
  - terminal : string
  - typeCargaison : string
- Réponse :
  - Code 201 (Created) : Retourne les détails de l'arrivée créée en format JSON.
  - Code 400 (Bad Request) : Si la requête est mal formulée ou si le modèle est invalide.
  - Code 500 (Internal Server Error) : Si un problème se produit lors de la création de l'arrivée.


04.

- Route : [host]/api/arrivees/{arriveeId:int}
- Méthode : PATCH
- Paramètres dans le corps de la requête :
  - id : int (doit être fourni pour identifier l'enregistrement à modifier)
  - nomNavire : string
  - portOrigine : string
  - terminal : string
  - typeCargaison : string
- Réponse :
  - Code 204 (No Content) : Indique que la mise à jour a été effectuée avec succès.
  - Code 400 (Bad Request) : Si la requête est mal formulée ou si le modèle est invalide.
  - Code 404 (Not Found) : Si l'enregistrement avec l'ID spécifié n'est pas trouvé.
  - Code 500 (Internal Server Error) : Si un problème se produit lors de la mise à jour de l'arrivée.



05.

- Route : [host]/api/arrivees/{arriveId:int}
- Méthode : DELETE
- Paramètre dans l'URL :
  - arriveId : int (ID de l'arrivée à supprimer)
- Réponse :
  - Code 204 (No Content) : Indique que la suppression a été effectuée avec succès.
  - Code 400 (Bad Request) : Si la requête est mal formulée ou si le modèle est invalide.
  - Code 403 (Forbidden) : Si l'utilisateur n'est pas autorisé à effectuer cette action.
  - Code 404 (Not Found) : Si l'enregistrement avec l'ID spécifié n'est pas trouvé.
  - Code 500 (Internal Server Error) : Si un problème se produit lors de la suppression de l'arrivée.














